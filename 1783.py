import sys

def MovingKnight(n,m):
    if n == 1:
        return 1
    elif n == 2: # 두 줄이라면, 아무리 m이 커도 최대 4칸이다. 이동횟수 제약으로 4칸 이상 여행불가
        # 그리고 두 줄이라면, 오른쪽 방향으로 2칸씩밖에 움직일 수밖에 없다. 마지막 +1 은 처음 시작지점 포인트를 포함시키기 위함.
        return min(4, ((m - 1)// 2) + 1) 
    else:
        # 세 줄 이상으로 늘어나면, 1번 규칙 (2칸 위로 + 1칸 오른쪽) + 4번 규칙 (2칸 아래 + 1칸 오른쪽) 방법으로 m칸 수만큼 움직일 수 있다.
        # 그런데, 가로 m=6칸까지는 '4회 이상 모든 규칙활용방식' 또는 '4회 미만 같은 방식활용'으로 최대 점유할 수 있는 칸은 4칸이다.
        if m <= 6:
            return min(4, m)
        
        # 6칸이 넘어가면, 최소 오른쪽으로 2칸씩 움직이는 규칙(2,3번)을 한번은 써먹어야 하고, 
        # 이후 최대로 먹을 수 있는 방법은 1,4 방식으로 나아가는 것이므로, 가로 칸수(m)에 -2를 해주면 최대 점유 칸수가 나온다.
        else:
            return m - 2

if __name__=='__main__':
    n, m = map(int, sys.stdin.readline().split())
    answer = MovingKnight(n, m)
    print(answer)